<?php

use Drupal\cj_material\DashboardHelper;
use Drupal\cj_membership\Entity\Membership;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_theme_registry_alter().
 */
function cj_material_theme_registry_alter(&$theme_registry) {
  $theme_registry['menu']['variables']['md_icons'] = [];
  $theme_registry['menu']['variables']['md_icon_replace'] = FALSE;
  $theme_registry['menu']['variables']['md_icon_hex'] = FALSE;

  $theme_registry['item_list']['variables']['list_group'] = NULL;
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function cj_material_theme_suggestions_alter(array &$suggestions, array $variables, string $hook): void {
  DashboardHelper::getInstance()->alterThemeSuggestions($suggestions, $variables, $hook);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cj_material_preprocess_container__user_summary(&$variables) {
  $variables['attributes']['class'][] = 'row';
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 *
 * Set md icons for account menu.
 */
function cj_material_preprocess_menu(array &$variables) {
  $variables += [
    'md_icons' => [],
    'md_icon_replace' => FALSE,
    'md_icon_hex' => FALSE,
  ];

  // Set up the account menu icons.
  if (!empty($variables['menu_name']) && $variables['menu_name'] == 'account') {
    $variables['md_icon_hex'] = TRUE;
    $variables['md_icon_replace'] = TRUE;

    // Map routes to icons.
    $variables['md_icons'] += [
      'user.logout' => 'exit_to_app',
      'user.page' => 'person',
      'contacts_jobs_dashboard.recruiter_organisation' => 'groups',
    ];

    if (\Drupal::currentUser()->isAnonymous()) {
      $variables['md_icons']['user.logout'] = 'person';
    }
  }

  // Nothing to do if there are no icons.
  if (empty($variables['md_icons'])) {
    return;
  }

  // Add the icons.
  foreach ($variables['items'] as $route => &$item) {
    if (in_array($route, array_keys($variables['md_icons']))) {
      $link_attributes = $item['url']->getOption('attributes') ?: [];

      // Add hexagon classes.
      if ($variables['md_icon_hex']) {
        $item['attributes']->addClass('menu-item');
        $link_attributes['class'][] = 'hexagon';
      }

      $icon = '<i class="material-icons">' . $variables['md_icons'][$route] . '</i>';

      if ($variables['md_icon_replace']) {
        // Move title to url attribute.
        $link_attributes['title'] = $item['title'];

        // Replace title with icon.
        $item['title'] = [
          '#markup' => $icon,
        ];
      }
      else {
        $item['title'] = [
          '#prefix' => $icon,
          '#markup' => $item['title'],
        ];
      }

      $item['url']->setOption('attributes', $link_attributes);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for html.
 */
function cj_material_preprocess_html(array &$variables) {
  // Add sticky navbar class
  $variables['attributes']['class'][] = 'navbar-fixed';

  DashboardHelper::getInstance()->preprocessHtml($variables);
}

/**
 * Implements hook_preprocess_HOOK() for page__dashboard.
 */
function cj_material_preprocess_page__dashboard(array &$variables) {
  DashboardHelper::getInstance()->preprocessPageDashboard($variables);

  $excluded_route_names = [
    'contacts_user_dashboard.summary',
    'entity.contacts_job.update_form',
    'entity.contacts_job.post_form'
  ];
  if (!in_array(\Drupal::routeMatch()->getRouteName(), $excluded_route_names)) {
    $variables['layout_content_classes'] = 'card card-body';
  }
}

/**
 * Implements hook_preprocess_HOOK() for block__locatl_tasks_block.
 */
function cj_materials_preprocess_block__local_tasks_block(&$variables) {
  DashboardHelper::getInstance()->preprocessLocalTasksBlock($variables);
}

/**
 * Implements hook_form_user_register_form_alter().
 */
function cj_material_form_user_register_form_alter(array &$form, FormStateInterface $form_state) {
  $form['crm_indiv_profiles']['widget'][0]['#type'] = 'container';
  $comps = &$form['crm_indiv_profiles']['widget'][0]['entity']['crm_name']['widget'][0]['#components'];
  $comps['given']['attributes']['placeholder'] = $comps['given']['title'];
  $comps['given']['title_display'] = 'none';
  $comps['family']['attributes']['placeholder'] = $comps['family']['title'];
  $comps['family']['title_display'] = 'none';
}

/**
 * Implments hook_form_user_self_edit_candidate_form_alter().
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function cj_material_form_user_self_edit_candidate_form_alter(array &$form, FormStateInterface $form_state) {
  $comps = &$form['individual_profile:name']['widget'][0]['#components'];
  $comps['given']['attributes']['placeholder'] = $comps['given']['title'];
  $comps['given']['title_display'] = 'none';
  $comps['family']['attributes']['placeholder'] = $comps['family']['title'];
  $comps['family']['title_display'] = 'none';

}

/**
 * Implements hook_preprocess_HOOK() for pages.
 */
function cj_material_preprocess_page(&$variables) {
  if (!empty($variables['node'])) {
    /** @var \Drupal\node\Entity\Node $node */
    $node = $variables['node'];
    if ($node->getType() == 'article') {
      foreach (Element::children($variables['page']['content']) as $id) {
        $block_render = &$variables['page']['content'][$id];
        if (!empty($block_render['#lazy_builder'])) {
          continue;
        }
        $block_render['#attributes']['class'][] = 'card-item';
        if ($id == 'cj_material_page_title') {
          $block_render['#attributes']['class'][] = 'card-title';
        }
        else {
          $block_render['#attributes']['class'][] = 'card-text';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_fieldset().
 */
function cj_material_preprocess_fieldset(&$variables) {
  if (in_array('card', $variables['attributes']['class'])) {
    $variables['legend']['attributes']->addClass('card-title');
    $variables['legend']['attributes']->addClass('card-item');
  }
}

/**
 * Preprocess Views View Fields for the Contacts Jobs List.
 */
function cj_material_preprocess_views_view_fields__contacts_jobs_list(&$variables) {
  /** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $job */
  $job = $variables['row']->_object;
  /** @var \Drupal\user\Entity\User $organisation */
  /** @var \Drupal\profile\Entity\Profile $organisation */
  if (
    ($organisation = $job->get('organisation')->entity) &&
    $organisation->hasField('profile_crm_org') &&
    ($profile = $organisation->profile_crm_org->entity) &&
    !$profile->org_image->isEmpty()
  ) {
    $logo = $profile->get('org_image')->view([
      'type' => 'image',
      'label' => 'hidden',
    ]);
  }
  else {
    $logo = [
      '#theme' => 'image',
      '#uri' => drupal_get_path('theme','cj_material').'/logo.svg',
    ];
  }
  $variables['fields']['logo'] = \Drupal::service('renderer')->render($logo);
}

/**
 * Preprocess Views View Fields
 *
 * @param $variables
 */
function cj_material_preprocess_views_view_fields__employer_directory(&$variables) {
  $row = $variables['row'];

  $user = $row->_object->getValue();
  /** @var \Drupal\cj_membership\Entity\Membership $membership */
  $membership = \Drupal::entityTypeManager()
    ->getStorage('cj_membership')
    ->getAccountMembership($user);
  $variables['is_member'] = FALSE;
  if ($membership && ($membership->status->value == Membership::STATUS_ACTIVE)) {
    $variables['is_member'] = TRUE;
  }

  $paid_count = isset($row->paid_role_count) ? $row->paid_role_count : 0;
  $vol_count = isset($row->voluntary_role_count) ? $row->voluntary_role_count : 0;

  $variables['paid_count'] = Markup::create(
    "<span class=\"directory-paid-role-count directory-icon\"><span class=\"material-icons\">work</span>{$paid_count}</span>"
  );
  $variables['vol_count'] = Markup::create(
    "<span class=\"directory-vol-role-count directory-icon\"><span class=\"material-icons\">emoji_people</span>{$vol_count}</span>"
  );

  /** @var \Drupal\flag\FlagLinkBuilderInterface $link_builder */
  $link_builder = \Drupal::service('flag.link_builder');
  $variables['like_count'] = $link_builder->build(
    'user',
    $row->_object->getEntity()->id(),
    'employer_like'
  );
  $variables['like_count']['#attributes']['title'] = !empty($variables['like_count']['#title']) ? $variables['like_count']['#title'] : new TranslatableMarkup('Likes');
  $variables['like_count']['#title'] = isset($row->like_count) ? $row->like_count : 0;

  if (empty($variables['like_count']['#theme'])) {
    $variables['like_count'] = Markup::create(
      "<span class=\"directory-like-count directory-icon\">".(isset($row->like_count) ? $row->like_count : 0)."</span>"
    );
  }
}

function cj_material_preprocess_flag(&$variables) {
  if ($variables['flag']->id() === 'employer_like') {
    $variables['attributes']['class'][] = 'chip';
    $variables['attributes']['class'][] = 'directory-icon';
    $variables['attributes']['class'][] = 'directory-like-count';

    if (!is_numeric($variables['title'])) {
      $variables['attributes']['title'] = $variables['title'];

      /** @var \Drupal\flag\FlagCountManagerInterface $count_service */
      $count_service = \Drupal::service('flag.count');
      $counts = $count_service->getEntityFlagCounts($variables['flaggable']);
      $variables['title'] = !empty($counts['employer_like']) ? $counts['employer_like'] : 0;
    }
  }
}

function cj_material_preprocess_layout__twocol_section(&$variables) {
  $variables['content']['#attributes']['class'][] = 'row';
  $variables['attributes']['class'][] = 'row';

  $variables['content']['first']['#attributes']['class'] = ['col-xs-12', 'col-md-6'];
  $variables['region_attributes']['first']['class'] = ['col-xs-12', 'col-md-6'];
  $variables['content']['second']['#attributes']['class'] = ['col-xs-12', 'col-md-6'];
  $variables['region_attributes']['second']['class'] = ['col-xs-12', 'col-md-6'];
}
