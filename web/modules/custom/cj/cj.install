<?php

use Drupal\Core\Config\Config;
use Drupal\Core\Config\FileStorage;

/**
 * Implements hook_install()
 */
function cj_install() {
  $config = \Drupal::configFactory()->getEditable('user.settings');
  $config->set('register', USER_REGISTER_VISITORS);
  $config->set('verify_mail', FALSE);
  $config->save(TRUE);

  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $block_config_storage */
  $block_config_storage = \Drupal::entityTypeManager()->getStorage('block');
  $block_config_storage->delete($block_config_storage->loadMultiple([
    'cj_material_footer',
    'cj_material_account_menu',
    'cj_material_powered',
    'cj_material_search',
    'cj_material_tools',
  ]));

  $block_config_storage->load('cj_material_branding')
    ->setThirdPartySetting('block_class', 'classes', 'navbar-item navbar-branding')
    ->set('region', 'navbar')
    ->set('weight', -10)
    ->save();
  $block_config_storage->load('cj_material_main_menu')
    ->setThirdPartySetting('block_class', 'classes', 'navbar-menu navbar-item pull-right')
    ->set('region', 'navbar')
    ->set('weight', -6)
    ->save();

  $user = \Drupal::entityTypeManager()->getStorage('user')->load(1);
  $storage = \Drupal::entityTypeManager()->getStorage('commerce_store');
  $store = $storage->create([
    'type' => 'online',
    'uid' => 1,
    'mail' => $user->mail->value,
    'name' => 'Christian Jobs',
    'default_currency' => 'GBP',
    'address' => [
      'country_code' => 'GB',
      'address_line1' => 'Christian Jobs Ltd, The Enterprise Centre, 34 Benchill Rd',
      'locality' => 'Manchester',
      'administrative_area' => 'Greater Manchester',
      'postal_code' => 'M22 8LF',
    ],
    'billing_countries' => ['GB'],
    'tax_registrations' => ['GB'],
  ]);
  $store->save();
  $storage->markAsDefault($store);
}

/**
 * Set commerce store infomration.
 */
function cj_update_8001() {
  $storage = \Drupal::entityTypeManager()->getStorage('commerce_store');
  $ids = $storage->getQuery()->condition('name', 'Christian Jobs')->execute();
  if ($ids && ($store = $storage->load(reset($ids)))) {
    $store->tax_registrations = ['GB'];
    $store->default_currency = 'GBP';
    $store->save();
  }
}

/**
 * Add email registration and recaptcha.
 */
function cj_update_8002() {
  \Drupal::service('module_installer')->install([
    'recaptcha',
    'email_registration',
  ]);
}

/**
 * Add token module.
 */
function cj_update_8003() {
  \Drupal::service('module_installer')->install([
    'token',
  ]);
}

/**
 * Add metatag modules
 */
function cj_update_8004() {
  \Drupal::service('module_installer')->install([
    'metatag',
    'metatag_views',
    'metatag_mobile',
  ]);
}

/**
 * Add pathauto
 */
function cj_update_8005() {
  \Drupal::service('module_installer')->install([
    'pathauto',
  ]);

  $source = new FileStorage(drupal_get_path('module', 'cj').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  $configs_to_install = [
    'pathauto.pattern.job_categories',
    'pathauto.pattern.job_keyword',
    'pathauto.pattern.job_role',
  ];
  foreach ($configs_to_install as $name) {
    $config_storage->write($name, $source->read($name));
  }
}

/**
 * Install inline_form_errors
 */
function cj_update_8006() {
  \Drupal::service('module_installer')->install([
    'inline_form_errors',
  ]);
}

/**
 * Add pathauto
 */
function cj_update_8007() {
  $source = new FileStorage(drupal_get_path('module', 'cj').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'pathauto.pattern.news_article',
    'views.view.latest_news',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config(
      $name,
      \Drupal::service('config.storage'),
      \Drupal::service('event_dispatcher'),
      \Drupal::service('config.typed')
    );
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }
}

/**
 * Add Attendee Registration Form.
 */
function cj_update_8008() {
  \Drupal::service('module_installer')->install([
    'time_field',
  ]);

  $source = new FileStorage(drupal_get_path('module', 'cj').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'contact.form.showcase_attendee',
    'core.entity_form_display.contact_message.showcase_attendee.default',
    'field.storage.contact_message.field_arrival_time',
    'field.storage.contact_message.field_attendee_com_consent',
    'field.storage.contact_message.field_attendee_how_hear',
    'field.storage.contact_message.field_attendee_organisation',
    'field.storage.contact_message.field_attendee_origin',
    'field.storage.contact_message.field_attendee_phone',
    'field.storage.contact_message.field_attendee_storage_consent',
    'field.storage.contact_message.field_ntc_connection',
    'field.field.contact_message.showcase_attendee.field_arrival_time',
    'field.field.contact_message.showcase_attendee.field_attendee_com_consent',
    'field.field.contact_message.showcase_attendee.field_attendee_how_hear',
    'field.field.contact_message.showcase_attendee.field_attendee_organisation',
    'field.field.contact_message.showcase_attendee.field_attendee_origin',
    'field.field.contact_message.showcase_attendee.field_attendee_phone',
    'field.field.contact_message.showcase_attendee.field_attendee_storage_consent',
    'field.field.contact_message.showcase_attendee.field_ntc_connection',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config(
      $name,
      \Drupal::service('config.storage'),
      \Drupal::service('event_dispatcher'),
      \Drupal::service('config.typed')
    );
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }
}

/**
 * Install self_edit_candidate mode
 */
function cj_update_8009() {
  $source = new FileStorage(drupal_get_path('module', 'cj').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'core.entity_form_mode.user.self_edit_candidate',
    'field.storage.profile.consent__events_update',
    'field.storage.profile.consent__job_update',
    'field.storage.profile.consent__share_profile',
    'field.storage.profile.consent__spec_job_update',
    'field.storage.profile.consent__use_profile',
    'field.storage.profile.consent_date__events_update',
    'field.storage.profile.consent_date__job_update',
    'field.storage.profile.consent_date__share_profile',
    'field.storage.profile.consent_date__spec_job_update',
    'field.storage.profile.consent_date__use_profile',
    'field.field.profile.individual.consent__events_update',
    'field.field.profile.individual.consent__job_update',
    'field.field.profile.individual.consent__share_profile',
    'field.field.profile.individual.consent__spec_job_update',
    'field.field.profile.individual.consent_date__events_update',
    'field.field.profile.individual.consent__use_profile',
    'field.field.profile.individual.consent_date__job_update',
    'field.field.profile.individual.consent_date__share_profile',
    'field.field.profile.individual.consent_date__spec_job_update',
    'field.field.profile.individual.consent_date__use_profile',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config(
      $name,
      \Drupal::service('config.storage'),
      \Drupal::service('event_dispatcher'),
      \Drupal::service('config.typed')
    );
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }
}

/**
 * Invoice printing.
 */
function cj_update_8010() {
  \Drupal::service('module_installer')->install([
    'pdf_tools', 'commerce_invoice',
  ]);

  $source = new FileStorage(drupal_get_path('module', 'cj').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'core.entity_view_display.commerce_order.default.invoice',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config(
      $name,
      \Drupal::service('config.storage'),
      \Drupal::service('event_dispatcher'),
      \Drupal::service('config.typed')
    );
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }
}

/**
 * Install front page Luova block
 */
function cj_update_8011() {
  $source = new FileStorage(drupal_get_path('module', 'cj').'/config/install');
  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
  $config_storage = \Drupal::service('config.storage');

  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $configs_to_install = [
    'block.block.christianjobsfrontpageluovablock',
  ];
  foreach ($configs_to_install as $name) {
    $config = new Config(
      $name,
      \Drupal::service('config.storage'),
      \Drupal::service('event_dispatcher'),
      \Drupal::service('config.typed')
    );
    $config->setData($source->read($name));

    if ($entity_type = $config_manager->getEntityTypeIdByName($name)) {
      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
      $entity_storage = $config_manager->getEntityManager()->getStorage($entity_type);

      $id = $entity_storage->getIDFromConfigName($name, $entity_storage->getEntityType()->getConfigPrefix());
      if ($config_storage->exists($name)) {
        /** @var \Drupal\Core\Config\Entity\ConfigEntityBase $entity */
        $entity = $entity_storage->load($id);
        $entity = $entity_storage->updateFromStorageRecord($entity, $config->get());
      }
      else {
        $entity = $entity_storage->createFromStorageRecord($config->get());
      }

      if ($entity->isInstallable()) {
        $entity->trustData()->save();
      }
    }
    else {
      $config->save();
    }
  }
}
