<?php

use Drupal\commerce_order\Entity\Order;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_module_implements_alter().
 */
function cj_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['cj'])) {
    $group = $implementations['cj'];
    unset($implementations['cj']);
    $implementations['cj'] = $group;
  }
}

/**
 * Implements hook_entity_type_build()
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function cj_entity_type_build(&$entity_types) {
  if ($entity_type = $entity_types['user']) {
    $entity_type->setFormClass('self_edit_candidate', ContentEntityForm::class);
  }
}

/**
 * Implements hook_form_user_register_form_alter().
 */
function cj_form_user_register_form_alter(array &$form, FormStateInterface $form_state) {
  $form['account']['account_type'] = [
    '#type' => 'radios',
    '#options' => [
      'seeker' => t('Job Seeker'),
      'employer' => t('Employer'),
    ],
    '#attributes' => [
      'class' => ['account-type-radios'],
    ],
    '#weight' => -100,
    '#required' => TRUE,
  ];

  $cookies = \Drupal::request()->cookies;
  if ($cookies->get('Drupal_visitor_jobPostRegister') || $form_state->get('job_post_register')) {
    $form['account']['account_type']['#default_value'] = 'employer';
  }

  $form['account']['org_name'] = [
    '#type' => 'textfield',
    '#title' => new TranslatableMarkup('Organisation Name'),
    '#states' => [
      'visible' => [
        ':input[name="account_type"]' => ['value' => 'employer'],
      ],
    ],
    '#weight' => -90,
  ];
  $form['account']['indiv_name_wrapper'] = [
    '#type' => 'container',
    '#weight' => -90,
    '#states' => [
      'visible' => [
        ':input[name="account_type"]' => ['value' => 'seeker'],
      ],
    ],
  ];
  $form['account']['indiv_name_wrapper']['indiv_name'] = [
    '#type' => 'name',
    '#title' => new TranslatableMarkup('Name'),
    '#minimum_components' => ['given' => 'given', 'family' => 'family'],
    '#allow_family_or_given' => TRUE,
    '#parents' => ['indiv_name'],
    '#components' => [
      'title' => [
        'exclude' => TRUE,
      ],
      'given' => [
        'type' => 'textfield',
        'title' => new TranslatableMarkup('First Name'),
        'title_display' => 'label',
        'size' => 60,
        'maxlength' => 60,
      ],
      'middle' => [
        'exclude' => TRUE,
      ],
      'family' => [
        'type' => 'textfield',
        'title' => new TranslatableMarkup('Last Name'),
        'title_display' => 'label',
        'size' => 60,
        'maxlength' => 60,
      ],
      'generational' => [
        'exclude' => TRUE,
      ],
      'credentials' => [
        'exclude' => TRUE,
      ],
    ],
  ];

  $button = &$form['actions']['submit'];
  $sub_form_key = array_search('::submitForm', $button['#submit']);
  array_splice($button['#submit'], $sub_form_key+1, 0, ['cj_user_register_form_submit_set_role']);
  $button['#submit'][] = 'cj_user_register_form_submit_set_name';
}

/**
 * Add the correct role to the person registering.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function cj_user_register_form_submit_set_role(array $form, FormStateInterface $form_state) {
  $type = $form_state->getValue('account_type');

  /** @var \Drupal\user\UserInterface $account */
  $account = $form_state->getFormObject()->getEntity();
  if ($type == 'seeker') {
    $account->addRole('individual');
    $account->addRole('candidate');
  }
  else {
    $account->addRole('organisation');
    $account->addRole('employer');
  }
}

/**
 *
 */
function cj_user_register_form_submit_set_name(array $form, FormStateInterface $form_state) {
  $type = $form_state->getValue('account_type');

  /** @var \Drupal\profile\ProfileStorageInterface $storage */
  $storage = \Drupal::entityTypeManager()->getStorage('profile');

  /** @var \Drupal\user\UserInterface $account */
  $account = $form_state->getFormObject()->getEntity();
  if ($type == 'seeker') {
    $name = $form_state->getValue('indiv_name');

    $profile = $storage->loadDefaultByUser($account, 'individual');
    if (!$profile) {
      $profile = $storage->create([
        'uid' => $account->id(),
        'type' => 'individual',
      ]);
    }

    $profile->name = $name;

    $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
    $email_paragraph = $paragraph_storage->create([
      'type' => 'email_address',
      'email_address' => $account->getEmail(),
      'email_type' => 'personal',
    ]);
    $profile->email_addresses[] = $email_paragraph;
    $profile->save();

    $form_state->setRedirect(
      'cj.self_edit_candidate',
      ['user' => $account->id()]
    );
  }
  else if ($type == 'employer') {
    $name = $form_state->getValue('org_name');

    $profile = $storage->loadDefaultByUser($account, 'employer');
    if (!$profile) {
      $profile = $storage->create([
        'uid' => $account->id(),
        'type' => 'employer',
      ]);
    }
    $profile->employer_name = $name;
    $profile->save();

    $profile = $storage->loadDefaultByUser($account, 'organisation');
    if (!$profile) {
      $profile = $storage->create([
        'uid' => $account->id(),
        'type' => 'organisation',
      ]);
    }
    $profile->organisation_name = $name;
    $profile->save();

    $form_state->setRedirect(
      'job_board.employer_edit',
      ['user' => $account->id()]
    );
  }
}

/**
 * Implements hook_form_contact_form_alter().
 */
function cj_form_contact_message_showcase_attendee_form_alter(array &$form, FormStateInterface $form_state) {
  $form['name']['#title_display'] = 'invisible';
  $form['name']['#placeholder'] = 'Full Name';

  $form['mail']['#title_display'] = 'invisible';
  $form['mail']['#placeholder'] = 'Email Address';

  $form['field_attendee_phone']['widget'][0]['value']['#placeholder'] = 'Phone';
  $form['field_attendee_phone']['widget'][0]['value']['#title_display'] = 'invisible';

  $form['field_attendee_organisation']['widget'][0]['value']['#placeholder'] = 'Church/Organisation';
  $form['field_attendee_organisation']['widget'][0]['value']['#title_display'] = 'invisible';

  $form['field_arrival_time']['#attributes']['class'][] = 'divider-top';
  $form['field_arrival_time']['#attributes']['class'][] = 'pl-24';
  $form['field_arrival_time']['#attributes']['class'][] = 'pr-24';
  $form['field_arrival_time']['#attributes']['class'][] = 'card-item';
  $form['field_attendee_how_hear']['#attributes']['class'][] = 'divider-top';
  $form['field_attendee_how_hear']['#attributes']['class'][] = 'pl-24';
  $form['field_attendee_how_hear']['#attributes']['class'][] = 'pr-24';
  $form['field_attendee_how_hear']['#attributes']['class'][] = 'card-item';
  $form['field_attendee_storage_consent']['#attributes']['class'][] = 'divider-top';
  $form['field_attendee_storage_consent']['#attributes']['class'][] = 'pl-24';
  $form['field_attendee_storage_consent']['#attributes']['class'][] = 'pr-24';
  $form['field_attendee_storage_consent']['#attributes']['class'][] = 'card-item';

  $form['actions']['#attributes']['class'] = ['card-item', 'card-actions', 'divider-top'];
  $form['actions']['preview']['#access'] = FALSE;
  $form['actions']['submit']['#value'] = new TranslatableMarkup('Submit');
}

/**
 * Implements hook_form_contact_form_alter().
 */
function cj_form_contact_message_elim_interest_form_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#attributes']['class'][] = 'card-main';
  $form['#attributes']['class'][] = 'card';

  $form['field_name']['widget'][0]['value']['#title_display'] = 'invisible';
  $form['field_name']['widget'][0]['value']['#placeholder'] = 'Full Name';

  $form['field_contact_email']['widget'][0]['value']['#title_display'] = 'invisible';
  $form['field_contact_email']['widget'][0]['value']['#placeholder'] = 'Email Address';

  $form['field_attendee_phone']['widget'][0]['value']['#placeholder'] = 'Phone';
  $form['field_attendee_phone']['widget'][0]['value']['#title_display'] = 'invisible';

  $form['field_attendee_organisation']['widget'][0]['value']['#placeholder'] = 'Church/Organisation';
  $form['field_attendee_organisation']['widget'][0]['value']['#title_display'] = 'invisible';
  $form['field_attendee_storage_consent']['#attributes']['class'][] = 'divider-top';
  $form['field_attendee_storage_consent']['#attributes']['class'][] = 'pl-24';
  $form['field_attendee_storage_consent']['#attributes']['class'][] = 'pr-24';
  $form['field_attendee_storage_consent']['#attributes']['class'][] = 'card-item';

  $form['actions']['#attributes']['class'] = ['card-item', 'card-actions', 'divider-top'];
  $form['actions']['preview']['#access'] = FALSE;
  $form['actions']['submit']['#value'] = new TranslatableMarkup('Submit');
}


/**
 * Implements hook_form_user_form_alter().
 */
function cj_form_user_form_alter(array &$form, FormStateInterface $form_state) {
  // Email registration doesn't check whether the account portion of the form
  // exists before fiddling with it. Undo those fiddles here.
  if (!isset($form['account']['name']) || ($form['account']['name']['#type'] == 'value' && !isset($form['account']['name']['#default_value']))) {
    unset($form['account']);
  }

  $form['contact']['#access'] = FALSE;
  $form['contact']['contact']['#default_value'] = FALSE;
  $form['user_picture']['#access'] = FALSE;
  $form['timezone']['#access'] = FALSE;
}

/**
 * Implements hook_form_user_self_edit_candidate_form_alter().
 */
function cj_form_user_self_edit_candidate_form_alter(array &$form, FormStateInterface $form_state) {
  $current_user = \Drupal::currentUser();
  /** @var \Drupal\user\UserInterface $form_user */
  $form_user = $form_state->getFormObject()->getEntity();

  foreach (Element::children($form) as $namespace) {
    if (substr($namespace, 0, strlen('individual_profile:consent')) != 'individual_profile:consent') {
      continue;
    }

    if (isset($form[$namespace]['widget'][0]['value'])) {
      if ($form[$namespace]['widget'][0]['value']['#type'] == 'datetime') {
        // The dates are never directly editable.
        $form[$namespace]['#access'] = FALSE;

        if ($form_user->id() == $current_user->id()) {
          $form[$namespace]['widget'][0]['value']['#default_value'] = new DrupalDateTime();
        }
      }
    }

    if ($current_user->id() != $form_user->id()) {
      $form[$namespace]['#access'] = FALSE;
    }
  }

  $form['actions']['submit']['#value'] = new TranslatableMarkup('Save Profile');
  $form['actions']['submit']['#submit'][] = 'cj_form_user_self_edit_candidate_form_submit_message';

  unset($form['individual_profile:places']['widget']['entities']['#table_fields']['type']);
}

/**
 * Submit function to show a message.
 */
function cj_form_user_self_edit_candidate_form_submit_message($form, FormStateInterface $form_state) {
  \Drupal::messenger()->addStatus(new TranslatableMarkup('Thanks for updating your profile. You can keep your profile up to date at any time by logging in to Christian Jobs and clicking the \'Edit Profile\' button at the top of your dashboard.'));
}

/**
 * Implements hook_local_tasks_alter().
 */
function cj_local_tasks_alter(&$local_tasks) {
  $local_tasks['entity.user.edit_form']['title'] = 'Edit Account';
  unset($local_tasks['entity.commerce_payment_method.collection']);
  unset($local_tasks['entity.profile.user_profile_form:profile.type.individual']);
  unset($local_tasks['entity.profile.user_profile_form:profile.type.organisation']);
}

/**
 * Implements hook_commerce_invoice_pdf_options_alter().
 */
function cj_commerce_invoice_pdf_options_alter(array &$options, Order $order) {
  $options['footer-type'] = 'file';
  $options['footer-file'] = drupal_get_path('module', 'cj').'/assets/letter-footer.html';
  $options['header-type'] = 'file';
  $options['header-file'] = drupal_get_path('module', 'cj').'/assets/letter-header.html';
}

/**
 * Implements hook_commerce_order_view_alter().
 */
function cj_commerce_order_view_alter(array &$build, EntityInterface $order, EntityViewDisplayInterface $display) {
  /** @var \Drupal\commerce_order\Entity\Order $order */
  if ($build['#view_mode'] === 'invoice') {
    $config = \Drupal::config('cj.bank_details');

    $build['#attached']['library'][] = 'cj/invoice';

    /** @var \Drupal\Core\Datetime\DrupalDateTime $placed_date */
    $due_date = DrupalDateTime::createFromTimestamp($order->getPlacedTime())
      ->add(new DateInterval('P1D'));

    $build['placed']['#title'] = new TranslatableMarkup('<strong>Invoice Date</strong>');

    $build['due'] = $build['placed'];
    $build['due']['#title'] = new TranslatableMarkup('<strong>Due Date</strong>');
    $build['due'][0]['#markup'] = $due_date->format('d/m/Y');

    $build['order_number']['#title'] = new TranslatableMarkup('<strong>Invoice Reference</strong>');

    $build['invoice_details'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#weight' => $build['order_number']['#weight'],
      '#attributes' => [
        'class' => [ 'invoice-details' ],
      ],
      'placed' => ['#weight' => 0] + $build['placed'],
      'due' => ['#weight' => 2] + $build['due'],
      'order_number' => ['#weight' => 1] + $build['order_number'],
    ];
    unset($build['placed']); unset($build['due']); unset($build['order_number']);

    $cover = [
      '#type' => 'html_tag',
      '#weight' => 100,
      '#tag' => 'div',
      '#attributes' => [
        'style' => 'page-break-before: always;',
        'class' => [ 'cover-letter' ]
      ],
    ];
    $cover['date'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-date' ],
      ],
      '#value' => (new DrupalDateTime())->format('d/m/Y'),
    ];
    $cover['dear'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-content', 'letter-dear' ],
      ],
      '#value' => new TranslatableMarkup("Dear @name,", ['@name' => $order->getBillingProfile()->get('address')->given_name]),
    ];
    $cover['content'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-content' ],
      ],
      '#value' => new TranslatableMarkup(
        "Please find invoice @order_number representing your recent purchase. This is due for immediate payment via the bank details below. Please include the invoice reference in your payment.",
        [
          '@order_number' => $order->getOrderNumber(),
        ]
      ),
    ];
    $cover['payment'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-content' ],
      ],
      '#value' => new TranslatableMarkup(
        "<strong>Payment Details</strong><br />Bank Name: @bank_name<br />Company: Christian Jobs Ltd<br />Sort Code: @sort_code<br />Account Number: @account_number<br />Invoice Reference: @order_number",
        [
          '@bank_name' => $config->get('bank_name'),
          '@sort_code' => $config->get('sort_code'),
          '@account_number' => $config->get('account_number'),
          '@order_number' => $order->getOrderNumber(),
        ]
      ),
    ];
    $cover['content2'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-content' ],
      ],
      '#value' => new TranslatableMarkup(
        "Due to our environmental policy we no longer supply hard copies of invoices. Please print a copy of this document for your files."
      ),
    ];
    $cover['from'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-content' ],
      ],
      '#value' => new TranslatableMarkup(
        "Regards,<br /><img src=\"@signature_uri\" style=\"max-height: 100px;\"><br />James Everall<br />Managing Partner",
        [
          '@signature_uri' => file_create_url('/'.drupal_get_path('module', 'cj').'/assets/jesig.png'),
        ]
      ),
    ];
    $build['cover_letter'] = $cover;
  }
}
