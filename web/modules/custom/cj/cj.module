<?php

use Drupal\cj_membership\Entity\Membership;
use Drupal\commerce_order\Entity\Order;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Locale\CountryManager;
use Drupal\Core\Render\Element;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\profile\Entity\Profile;

/**
 * Implements hook_cron().
 *
function cj_cron() {
  /** @var \Drupal\profile\ProfileStorageInterface $profile_storage
  $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

  // Manage the employer_on_directory status. We do this with a raw query as it
  // involves lots and lots of joining.

  // Find all profiles marked as on the directory that do not have an active membership.
  $query = \Drupal::database()->select('profile__employer_on_directory', 'eod');
  $query->condition('eod.employer_on_directory_value', 1);
  $query->join('profile', 'p', 'p.profile_id = eod.entity_id');
  $query->leftJoin(
    'cj_membership',
    'm',
    'p.uid = m.member AND m.status = :active',
    [':active' => Membership::STATUS_ACTIVE]
  );
  $query->isNull('m.id');
  $query->addField('p','profile_id', 'id');

  foreach ($profile_storage->loadMultiple($query->execute()->fetchCol()) as $profile) {
    $profile->employer_on_directory = FALSE;
    $profile->save();
  }

  // Find all profiles not marked as on the directory that have an active membership.
  $query = \Drupal::database()->select('profile', 'p');
  $query->leftJoin('profile__employer_on_directory', 'eod', 'eod.entity_id = p.profile_id');
  $query->condition(
    $query->orConditionGroup()
      ->isNull('eod.employer_on_directory_value')
      ->condition('eod.employer_on_directory_value', 0)
  );
  $query->leftJoin(
    'cj_membership',
    'm',
    'p.uid = m.member AND m.status = :active',
    [':active' => Membership::STATUS_ACTIVE]
  );
  $query->isNotNull('m.id');
  $query->addField('p','profile_id', 'id');
  $query->groupBy('p.profile_id');

  foreach ($profile_storage->loadMultiple($query->execute()->fetchCol()) as $profile) {
    $profile->employer_on_directory = TRUE;
    $profile->save();
  }
}*/

/**
 * Implements hook_module_implements_alter().
 */
function cj_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['cj'])) {
    $group = $implementations['cj'];
    unset($implementations['cj']);
    $implementations['cj'] = $group;
  }
}

/**
 * Implements hook_entity_type_build()
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function cj_entity_type_build(&$entity_types) {
  if ($entity_type = $entity_types['user']) {
    $entity_type->setFormClass('self_edit_candidate', ContentEntityForm::class);
  }
}

/**
 * Implements hook_form_commerce_checkout_flow_multistep_default_alter()
 */
function cj_form_commerce_checkout_flow_multistep_default_alter(array &$form, FormStateInterface $form_state) {
  if ($form['#step_id'] !== 'order_information') {
    return;
  }

  if (!empty($form['payment_information']['payment_method'])) {
    $form['payment_information']['payment_method']['#attributes']['class'][] = 'payment-method';
  }
  if (!empty($form['payment_information']['billing_information']['edit_button'])) {
    $form['payment_information']['billing_information']['edit_button']['#attributes']['class'][] = "checkout-address-book-edit-button";
  }
}

/**
 * Implements hook_form_user_form_alter().
 */
function cj_form_user_form_alter(array &$form, FormStateInterface $form_state) {
  // Email registration doesn't check whether the account portion of the form
  // exists before fiddling with it. Undo those fiddles here.
  if (!isset($form['account']['name']) || (!empty($form['account']['name']['#type']) && $form['account']['name']['#type'] == 'value' && !isset($form['account']['name']['#default_value']))) {
    unset($form['account']);
  }

  $form['contact']['#access'] = FALSE;
  $form['contact']['contact']['#default_value'] = FALSE;
  $form['user_picture']['#access'] = FALSE;
  $form['timezone']['#access'] = FALSE;
}

/**
 * Implements hook_local_tasks_alter().
 */
function cj_local_tasks_alter(&$local_tasks) {
  $local_tasks['entity.user.edit_form']['title'] = 'Edit Account';
  unset($local_tasks['entity.commerce_payment_method.collection']);
  unset($local_tasks['entity.profile.user_profile_form:profile.type.individual']);
  unset($local_tasks['entity.profile.user_profile_form:profile.type.organisation']);
}

/**
 * Implements hook_commerce_invoice_pdf_options_alter().
 */
function cj_commerce_invoice_pdf_options_alter(array &$options, Order $order) {
  $options['footer-type'] = 'file';
  $options['footer-file'] = drupal_get_path('module', 'cj').'/assets/letter-footer.html';
  $options['header-type'] = 'file';
  $options['header-file'] = drupal_get_path('module', 'cj').'/assets/letter-header.html';
}

/**
 * Implements hook_commerce_order_view_alter().
 */
function cj_commerce_order_view_alter(array &$build, EntityInterface $order, EntityViewDisplayInterface $display) {
  /** @var \Drupal\commerce_order\Entity\Order $order */
  if ($build['#view_mode'] === 'invoice') {
    $config = \Drupal::config('cj.bank_details');

    $build['#attached']['library'][] = 'cj/invoice';

    /** @var \Drupal\Core\Datetime\DrupalDateTime $placed_date */
    $due_date = DrupalDateTime::createFromTimestamp($order->getPlacedTime())
      ->add(new DateInterval('P1D'));

    $build['placed']['#title'] = new TranslatableMarkup('<strong>Invoice Date</strong>');

    $build['due'] = $build['placed'];
    $build['due']['#title'] = new TranslatableMarkup('<strong>Due Date</strong>');
    $build['due'][0]['#markup'] = $due_date->format('d/m/Y');

    $build['order_number']['#title'] = new TranslatableMarkup('<strong>Invoice Reference</strong>');

    $build['invoice_details'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#weight' => $build['order_number']['#weight'],
      '#attributes' => [
        'class' => [ 'invoice-details' ],
      ],
      'placed' => ['#weight' => 0] + $build['placed'],
      'due' => ['#weight' => 2] + $build['due'],
      'order_number' => ['#weight' => 1] + $build['order_number'],
    ];
    unset($build['placed']); unset($build['due']); unset($build['order_number']);

    $cover = [
      '#type' => 'html_tag',
      '#weight' => 100,
      '#tag' => 'div',
      '#attributes' => [
        'style' => 'page-break-before: always;',
        'class' => [ 'cover-letter' ]
      ],
    ];
    $cover['date'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-date' ],
      ],
      '#value' => (new DrupalDateTime())->format('d/m/Y'),
    ];
    $cover['dear'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-content', 'letter-dear' ],
      ],
      '#value' => new TranslatableMarkup("Dear @name,", ['@name' => $order->getBillingProfile()->get('address')->given_name]),
    ];
    $cover['content'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-content' ],
      ],
      '#value' => new TranslatableMarkup(
        "Please find invoice @order_number representing your recent purchase. This is due for immediate payment via the bank details below. Please include the invoice reference in your payment.",
        [
          '@order_number' => $order->getOrderNumber(),
        ]
      ),
    ];
    $cover['payment'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-content' ],
      ],
      '#value' => new TranslatableMarkup(
        "<strong>Payment Details</strong><br />Bank Name: @bank_name<br />Company: Christian Jobs Ltd<br />Sort Code: @sort_code<br />Account Number: @account_number<br />Invoice Reference: @order_number",
        [
          '@bank_name' => $config->get('bank_name'),
          '@sort_code' => $config->get('sort_code'),
          '@account_number' => $config->get('account_number'),
          '@order_number' => $order->getOrderNumber(),
        ]
      ),
    ];
    $cover['content2'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-content' ],
      ],
      '#value' => new TranslatableMarkup(
        "Due to our environmental policy we no longer supply hard copies of invoices. Please print a copy of this document for your files."
      ),
    ];
    $cover['from'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#attributes' => [
        'class' => [ 'letter-content' ],
      ],
      '#value' => new TranslatableMarkup(
        "Regards,<br /><img src=\"@signature_uri\" style=\"max-height: 100px;\"><br />James Everall<br />Managing Partner",
        [
          '@signature_uri' => file_create_url('/'.drupal_get_path('module', 'cj').'/assets/jesig.png'),
        ]
      ),
    ];
    $build['cover_letter'] = $cover;
  }
}

/**
 * Implements hook_cj_membership_update();
 *
 * @param \Drupal\cj_membership\Entity\Membership $membership
 */
function cj_cj_membership_update(Membership $membership) {
  /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
  $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

  // If the membership has just become active.
  if (($membership->status == Membership::STATUS_ACTIVE) && ($membership->status != $membership->original->status)) {
    $profile = $profile_storage->loadDefaultByUser($membership->getOwner(), 'employer');
    if (!$profile->employer_on_directory->value) {
      $profile->employer_on_directory = TRUE;
      $profile->save();
    }
  }
  else if (($membership->status == Membership::STATUS_EXPIRED) && ($membership->original->status == Membership::STATUS_ACTIVE)) {
    $profile = $profile_storage->loadDefaultByUser($membership->getOwner(),'employer');
    if ($profile->employer_on_directory->value) {
      $job_storage = \Drupal::entityTypeManager()->getStorage('job_role');
      $query = $job_storage->getQuery();
      $query->condition('organisation', $membership->getOwnerId());
      $query->condition('publish_date', (new DrupalDateTime())->format('Y-m-d'), '<');
      $query->condition('paid_to_date', (new DrupalDateTime())->format('Y-m-d'), '>=');

      if (!$query->count()->execute()) {
        $profile->employer_on_directory = FALSE;
        $profile->save();
      }
    }
  }
}

/**
 * Implements hook_cj_membership_insert.
 *
 * @param \Drupal\cj_membership\Entity\Membership $membership
 */
function cj_cj_membership_insert(Membership $membership) {
  /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
  $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

  if ($membership->status == Membership::STATUS_ACTIVE) {
    $profile = $profile_storage->loadDefaultByUser($membership->getOwner(), 'employer');
    if (!$profile->employer_on_directory->value) {
      $profile->employer_on_directory = TRUE;
      $profile->save();
    }
  }
}
