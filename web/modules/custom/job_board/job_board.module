<?php

use Drupal\cj_membership\Entity\Membership;
use Drupal\commerce_price\Price;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Locale\CountryManager;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItem;
use Drupal\job_board\Form\EmployerEditForm;
use Drupal\job_board\Form\JobDeleteForm;
use Drupal\job_board\Form\JobForm;
use Drupal\job_board\Form\JobPostForm;
use Drupal\job_board\JobBoardJobRole;
use Drupal\job_board\JobBoardJobRoleAccessControlHandler;
use Drupal\profile\Entity\Profile;
use Drupal\user\Entity\User;
use Drupal\user\EntityOwnerInterface;
use Drupal\user\UserInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_cron().
 */
function job_board_cron() {
  /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
  $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

  // Manage the employer_on_directory status. We do this with a raw query as it
  // involves lots and lots of joining.

  // Find all profiles marked as on the directory that do not have an active membership.
  $query = \Drupal::database()->select('profile__employer_on_directory', 'eod');
  $query->condition('eod.employer_on_directory_value', 1);
  $query->join('profile', 'p', 'p.profile_id = eod.entity_id');
  $query->leftJoin(
    'cj_membership',
    'm',
    'p.uid = m.member AND m.status = :active',
    [':active' => Membership::STATUS_ACTIVE]
  );
  $query->isNull('m.id');
  $query->addField('p','profile_id', 'id');

  foreach ($profile_storage->loadMultiple($query->execute()->fetchCol()) as $profile) {
    $profile->employer_on_directory = FALSE;
    $profile->save();
  }

  // Find all profiles not marked as on the directory that have an active membership.
  $query = \Drupal::database()->select('profile', 'p');
  $query->leftJoin('profile__employer_on_directory', 'eod', 'eod.entity_id = p.profile_id');
  $query->condition(
    $query->orConditionGroup()
      ->isNull('eod.employer_on_directory_value')
      ->condition('eod.employer_on_directory_value', 0)
  );
  $query->leftJoin(
    'cj_membership',
    'm',
    'p.uid = m.member AND m.status = :active',
    [':active' => Membership::STATUS_ACTIVE]
  );
  $query->isNotNull('m.id');
  $query->addField('p','profile_id', 'id');
  $query->groupBy('p.profile_id');

  foreach ($profile_storage->loadMultiple($query->execute()->fetchCol()) as $profile) {
    $profile->employer_on_directory = TRUE;
    $profile->save();
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function job_board_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['job_board'])) {
    $group = $implementations['job_board'];
    unset($implementations['job_board']);
    $implementations['job_board'] = $group;
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function job_board_entity_type_build(&$entity_types) {
  if ($entity_type = $entity_types['job_role']) {
    $entity_type->setClass(JobBoardJobRole::class);
    $entity_type->setFormClass('edit', JobForm::class);
    $entity_type->setFormClass('post', JobPostForm::class);
    $entity_type->setFormClass('delete', JobDeleteForm::class);
    $entity_type->setHandlerClass('access', JobBoardJobRoleAccessControlHandler::class);
    $entity_type->setLinkTemplate('canonical', '/job/{job_role}');
    $entity_type->setLinkTemplate('edit-form', '/job/{job_role}/edit');
    $entity_type->setLinkTemplate('delete-form', '/job/{job_role}/delete');
  }

  if ($entity_type = $entity_types['user']) {
    $entity_type->setFormClass('employer_details', EmployerEditForm::class);
  }
}

/**
 * Implements hook_entity_base_field_info()
 */
function job_board_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() != 'job_role') {
    return [];
  }

  $fields['description_summary'] = BaseFieldDefinition::create('text_long')
    ->setLabel(t('Summary'))
    ->setRevisionable(TRUE)
    ->setRequired(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'weight' => -5,
      'type' => 'text_textarea',
    ]);

  $fields['publish_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Publish Date'))
    ->setDescription(t('The first date on which this job will be published.'))
    ->setRevisionable(TRUE)
    ->setRequired(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'datetime_default',
    ]);
  $fields['application_deadline'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Application Deadline'))
    ->setDescription(t('The last date on which applications will be submitted. If this is before the end of the adverts duration, the job will not be visible after this date.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'datetime_default',
    ]);
  $fields['end_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('End Date'))
    ->setDescription(t('The last date on which this job will be published.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $fields['paid_to_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Paid To Date'))
    ->setDescription(t('The last date up to which this job has been paid.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $fields['boost_start_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Boost Start Date'))
    ->setDescription(t('Thedate on which to start boosting this job.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['boost_end_date'] = BaseFieldDefinition::create('datetime')
    ->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE)
    ->setLabel(t('Boost Start Date'))
    ->setDescription(t('Thedate on which to start boosting this job.'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $fields['initial_duration'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values', [
      'P30D' => new TranslatableMarkup('30 Days'),
      'P60D' => new TranslatableMarkup('60 Days'),
    ])
    ->setLabel(new TranslatableMarkup('Duration'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['rpo'] = BaseFieldDefinition::create('boolean')
    ->setLabel(new TranslatableMarkup('RPO Requested'))
    ->setDescription(new TranslatableMarkup('Appoint a Christian Jobs Recruitment Agent to walk you through the recruitment process.'))
    ->setSetting('on_label', new TranslatableMarkup('Use RPO Services'))
    ->setSetting('off_label', new TranslatableMarkup('Do Not Use RPO Services'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $fields['paid'] = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Paid'))
    ->setDescription(t('Has this job role been paid for.'))
    ->setSetting('on_label', t('Paid'))
    ->setSetting('off_label', t('Draft'))
    ->setCardinality(1)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $fields['keywords'] = BaseFieldDefinition::create('entity_reference')
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'keywords' => 'keywords',
      ],
      'auto_create' => TRUE,
      'auto_create_bundle' => 'keywords',
    ])
    ->setLabel(t('Keywords'))
    ->setDescription(t('Select up to 10 keywords to describe this job.'))
    ->setCardinality(10)
    ->setRevisionable(TRUE)
    ->setRequired(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'weight' => -6,
      'type' => 'entity_reference_autocomplete_tags',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['industry'] = BaseFieldDefinition::create('entity_reference')
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'industries' => 'industries',
      ],
      'auto_create' => TRUE,
      'auto_create_bundle' => 'industries',
    ])
    ->setLabel(t('Category'))
    ->setDescription(t('Select an category.'))
    ->setCardinality(1)
    ->setRequired(TRUE)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'weight' => -7,
      'type' => 'entity_reference_autocomplete',
    ])
    ->setDisplayConfigurable('form', TRUE);

  $fields['compensation'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values', [
      'volunteer' => t('Volunteer'),
      'apprentice' => t('Apprentice'),
      'per_hour' => t('Per Hour'),
      'per_day' => t('Per Day'),
      'per_week' => t('Per Week'),
      'per_month' => t('Per Month'),
      'pro_rate' => t('Pro-Rata'),
      'salaried' => t('Salaried'),
      'self_funded' => t('Self-Funded'),
    ])
    ->setLabel(t('Compensation'))
    ->setDescription(t('How is the role compensated?'))
    ->setRequired(TRUE)
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'options_select',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['hours'] = BaseFieldDefinition::create('list_string')
    ->setSetting('allowed_values', [
      'part_time' => t('Part Time'),
      'full_time' => t('Full Time'),
      'flexible' => t('Flexible'),
      'zero' => t('Zero-Hours'),
    ])
    ->setLabel(t('Hours'))
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'options_select',
    ])
    ->setDisplayConfigurable('form', TRUE);

  $fields['location_type'] = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Location Type'))
    ->setSetting('allowed_values', [
      'home' => new TranslatableMarkup('Home based'),
      'remote' => new TranslatableMarkup('Remote working'),
      'office' => new TranslatableMarkup('Office based'),
      'location' => new TranslatableMarkup('On location'),
    ])
    ->setRevisionable(TRUE)
    ->setRequired(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['location_geo'] = BaseFieldDefinition::create('geofield')
    ->setLabel('Location Geo')
    ->setRevisionable(TRUE)
    ->setRequired(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  $fields['location_tree'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel('Location Tree')
    ->setSetting('target_type', 'taxonomy_term')
    ->setSetting('handler', 'default:taxonomy_term')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'locations' => 'locations',
      ],
      'auto_create' => TRUE,
      'auto_create_bundle' => 'locations',
    ])
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED);
  $fields['location'] = BaseFieldDefinition::create('address')
    ->setLabel(t('Location'))
    ->setSetting('field_overrides', [
      'givenName' => ['override' => 'hidden'],
      'additionalName' => ['override' => 'hidden'],
      'familyName' => ['override' => 'hidden'],
      'organization' => ['override' => 'hidden'],
      'addressLine1' => ['override' => 'hidden'],
      'addressLine2' => ['override' => 'hidden'],
      'postalCode' => ['override' => 'hidden'],
      'sortingCode' => ['override' => 'hidden'],
      'dependentLocality' => ['override' => 'hidden'],
    ])
    ->setRevisionable(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'address_default',
    ]);

  $fields['contact_phone'] = BaseFieldDefinition::create('telephone')
    ->setLabel(t('Contact Telephone'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'telephone_default',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['contact_address'] = BaseFieldDefinition::create('address')
    ->setLabel(t('Contact Address'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'address_default',
    ])
    ->setDisplayConfigurable('form', TRUE);
  $fields['contact_email'] = BaseFieldDefinition::create('email')
    ->setLabel(t('Contact E-mail Address'))
    ->setRevisionable(TRUE)
    ->setDefaultValueCallback('job_board_job_role_contact_default_value')
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayOptions('form', [
      'type' => 'email_default',
    ])
    ->setDisplayConfigurable('form', TRUE);

  return $fields;
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function job_board_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() != 'job_role') {
    return;
  }

  $fields['files']->setSetting('file_extensions', 'pdf txt doc docx pptx ppt png');
  $fields['files']->setCardinality(5);
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function job_board_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state) {
  if (in_array($form['#id'], ['views-exposed-form-job-board-page', 'views-exposed-form-employer-directory-page'])) {
    $form['actions']['submit']['#value'] = new TranslatableMarkup('Search');
  }

  if ($form['#id'] == 'views-exposed-form-job-board-page') {
    if (!empty($form['location_geo__proximity'])) {
      $form['location_geo__proximity']['#type'] = 'container';
      $form['location_geo__proximity']['value']['#title'] = 'Location';
      $form['location_geo__proximity']['value']['#description'] = NULL;
      $form['location_geo__proximity']['value']['#size'] = 5;
      $form['location_geo__proximity']['value']['#wrapper_attributes']['class'] = ['distance-container'];
      $form['location_geo__proximity']['value']['#field_prefix'] = new TranslatableMarkup('Within');
      $form['location_geo__proximity']['value']['#field_suffix'] = new TranslatableMarkup(' miles of ');
      $form['location_geo__proximity']['source_configuration']['origin']['#title'] = NULL;
      $form['location_geo__proximity']['source_configuration']['#attributes']['class'] = ['origin-container'];
    }

    $form['#attributes']['class'][] = 'card';
    $form['actions']['#attributes']['class'] = [
      'card-item',
      'card-actions',
      'divider-top'
    ];
    $form['filters'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['row', 'card-item', 'card-text'],
      ],
    ];
    $form['filters']['label'] = $form['label'];
    unset($form['label']);
    $form['filters']['label']['#title'] = $form['#info']['filter-label']['label'];
    $form['filters']['label']['#prefix'] = '<div class="col-xs-12 col-md-6">';
    $form['filters']['label']['#suffix'] = '</div>';

    $form['filters']['organisation'] = $form['organisation'];
    unset($form['organisation']);
    $form['filters']['organisation']['#title'] = $form['#info']['filter-organisation']['label'];
    $form['filters']['organisation']['#prefix'] = '<div class="col-xs-12 col-md-6">';
    $form['filters']['organisation']['#suffix'] = '</div>';

    $form['filters']['location_geo__proximity'] = $form['location_geo__proximity'];
    unset($form['location_geo__proximity']);
    $form['filters']['location_geo__proximity']['#prefix'] = '<div class="col-xs-12 col-md-7">';
    $form['filters']['location_geo__proximity']['#suffix'] = '</div>';
    $form['filters']['location_geo__proximity']['#attributes']['class'] = [
      'form-item',
      'proximity-filter-container'
    ];

    $form['filters']['compensation'] = $form['compensation'];
    unset($form['compensation']);
    $form['filters']['compensation']['#title'] = $form['#info']['filter-compensation']['label'];
    $form['filters']['compensation']['#prefix'] = '<div class="col-xs-6 col-md-2">';
    $form['filters']['compensation']['#suffix'] = '</div>';

    $form['filters']['industry'] = $form['industry'];
    unset($form['industry']);
    $form['filters']['industry']['#title'] = $form['#info']['filter-industry']['label'];
    $form['filters']['industry']['#prefix'] = '<div class="col-xs-6 col-md-3">';
    $form['filters']['industry']['#suffix'] = '</div>';
  }
  else if ($form['#id'] == 'views-exposed-form-employer-directory-page') {
    $form['search']['#size'] = 128;
    $form['search']['#wrapper_attributes']['class'] =[
      'search-wrapper',
    ];
  }

}

/**
 * Implements hook_form_user_register_form_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function job_board_form_user_register_form_alter(array &$form, FormStateInterface $form_state) {
  $form['contact']['#access'] = FALSE;
  $form['user_picture']['#access'] = FALSE;
  $form['timezone']['#access'] = FALSE;

  if (!empty($form['legal'])) {
    $form['legal']['#type'] = 'container';
    unset($form['legal']['#title']);
    $form['legal']['#weight'] = $form['captcha']['#weight'] + .1;
    $form['legal']['#attached']['library'] = [
      'core/drupal.dialog.ajax',
    ];

    $form['legal']['legal_accept']['#title'] = new TranslatableMarkup(
      "<strong>Accept</strong> <a href=\":terms\" class=\"use-ajax\" data-dialog-type=\"modal\" data-dialog-options='{\"width\":600}'>Terms & Conditions</a> of Use",
      [
        ':terms' => '/legal',
      ]
    );
  }

  $cookies = \Drupal::request()->cookies;
  if ($cookies->get('Drupal_visitor_jobPostRegister') || $form_state->get('job_post_register')) {
    $form_state->set('job_post_register', TRUE);

    $form_state->set('wants_membership', ($cookies->get('Drupal_visitor_jobPostMembership') || $form_state->get('wants_membership')));
    $form_state->set('wants_rpo', ($cookies->get('Drupal_visitor_jobPostRPO') || $form_state->get('wants_rpo')));

    $form['actions']['submit']['#submit'][] = 'job_board_user_register_form_submit_redirect';
  }
}

/**
 * Redirect the register form the the employer edit page in the correct circumstances.
 */
function job_board_user_register_form_submit_redirect(array $form, FormStateInterface $form_state) {
  /** @var \Drupal\user\UserInterface $user */
  $user = $form_state->get('user');
  $user->addRole('employer');
  $user->save();

  $form_state->setRedirect('job_board.employer_edit', [
    'user' => $user->id(),
  ]);

  $cookies = [
    'jobPostRegister' => TRUE,
  ];
  if ($form_state->get('wants_membership')) {
    $cookies['jobPostMembership'] = TRUE;
  }
  if ($form_state->get('wants_rpo')) {
    $cookies['jobPostRPO'] = TRUE;
  }

  user_cookie_save($cookies);
}

/**
 * Implements hook_form_alter().
 */
function job_board_form_user_employer_details_form_alter(array &$form, FormStateInterface $form_state) {
  if (\Drupal::request()->cookies->get('Drupal_visitor_jobPostRegister')) {
    $form['actions']['submit']['#value'] = new TranslatableMarkup('Save & Continue');
    $form['actions']['submit']['#submit'][] = 'job_board_user_employer_details_form_submit_redirect';
  }
}

/**
 * Redirect the employer details form to the job post form in correct circumstances.
 */
function job_board_user_employer_details_form_submit_redirect(array $form, FormStateInterface $form_state) {
  $form_state->setRedirect('job_board.post');
  user_cookie_delete('jobPostRegister');
}

/**
 * Implements hook_profile_presave().
 */
function job_board_profile_presave(Profile $profile) {
  if ($profile->bundle() !== 'employer') {
    return;
  }

  /** @var \Drupal\geocoder_field\PreprocessorPluginManager $preprocessor_manager */
  $preprocessor_manager = \Drupal::service('plugin.manager.geocoder.preprocessor');
  /** @var \Drupal\geocoder\DumperPluginManager $dumper_manager */
  $dumper_manager = \Drupal::service('plugin.manager.geocoder.dumper');

  $address = $profile->address;
  if ($profile->original) {
    $original_address = $profile->original->address;
  }

  // First we need to Pre-process field.
  // Note: in case of Address module integration this creates the
  // value as formatted address.
  $preprocessor_manager->preprocess($address);

  // Skip any action if:
  // geofield has value and remote field value has not changed.
  if (isset($original_address) && !$profile->get('address_geo')->isEmpty() && $address->getValue() == $original_address->getValue()) {
    return;
  }

  /** @var \Drupal\geocoder\DumperBase $dumper */
  $dumper = $dumper_manager->createInstance('geojson');
  $result = [];

  foreach ($address->getValue() as $delta => $value) {
    if ($address->getFieldDefinition()->getType() == 'address_country') {
      $value['value'] = CountryManager::getStandardList()[$value['value']];
    }

    $address_collection = isset($value['value']) ? \Drupal::service('geocoder')->geocode($value['value'], ['googlemaps', 'googlemaps_business']) : NULL;
    if ($address_collection) {
      $result[$delta] = $dumper->dump($address_collection->first());

      // We can't use DumperPluginManager::fixDumperFieldIncompatibility
      // because we do not have a FieldConfigInterface.
      // Fix not UTF-8 encoded result strings.
      // https://stackoverflow.com/questions/6723562/how-to-detect-malformed-utf-8-string-in-php
      if (is_string($result[$delta])) {
        if (!preg_match('//u', $result[$delta])) {
          $result[$delta] = utf8_encode($result[$delta]);
        }
      }
    }
  }

  $profile->set('address_geo', $result);

  $terms = [];
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $data = json_decode($profile->address_geo->value);
  if (!$data || !isset($data->properties->adminLevels)) {
    return;
  }

  // First get the tem for the country.
  $loc_terms = $term_storage->loadByProperties(['vid' => 'locations', 'name' => $data->properties->country]);
  if (!($term = reset($loc_terms))) {
    $term = $term_storage->create([
      'vid' => 'locations',
      'name' => $data->properties->country,
    ]);
    $term->save();
  }
  $terms[] = $term;

  foreach ($data->properties->adminLevels as $level) {
    $level_terms = $term_storage->loadByProperties(['vid' => 'locations', 'name' => $level->name, 'parent' => $term->id()]);
    if (!($next_term = reset($level_terms))) {
      $next_term = $term_storage->create([
        'vid' => 'locations',
        'name' => $level->name,
        'parent' => $term->id(),
      ]);
      $next_term->save();
    }
    $terms[] = $term = $next_term;
  }

  $profile->address_tree = $terms;
}

/**
 * Get the Job Package Options.
 */
function job_board_job_package_options() {
  $info = job_board_job_package_info();

  $options = [];
  foreach ($info as $key => $package) {
    $options[$key] = $package['label'];
  }

  return $options;
}

/**
 * Get the Package Info.
 */
function job_board_job_package_info($key = NULL) {
  $info = [];
  $info['advert'] = [
    'label' => t('Job Advertisement'),
    'description' => t('Advertise your Job on ChristianJobs.co.uk for 60 days.'),
    'price' => new Price('100.00', 'GBP'),
    'allowed_featured_dates' => 1,
    'cta_text' => new TranslatableMarkup('Get Started'),
    'cta_url' => Url::fromRoute('job_board.post'),
    'features' => [
      [ 'title' => t('60 days exposure'), ],
      [ 'title' => t('Optional 30 additional days exposure (+£25)'), ],
      [
        'title' => t('Social media posting'),
      ],
    ],
  ];
  $info['membership'] = [
    'label' => t('Community Membership'),
    'price' => new Price('595.00', 'GBP'),
    'description' => t('Receive discounts, priority access and support by becoming a Community Member.'),
    'allowed_featured_dates' => 5,
    'cta_text' => new TranslatableMarkup('Find Out More'),
    'cta_url' => Url::fromUri('internal:/membership'),
    'features' => [
      [ 'title' => t('1 <strong>Free</strong> 60 day job advert'), ],
      [
        'title' => t('Discounted job adverts'),
        'description' => t('25% off all job adverts posted for one year.'),
      ],
      [ 'title' => t('Social media posting'), ],
      [ 'title' => t('Dedicated Account Manager'), ],
      [
        'title' => t('Priority access'),
        'description' => t('Blurb'),
      ],
      [
        'title' => t('Training & resources'),
        'description' => t('Access up to 4 training conferences every year.')
      ],
      [
        'title' => t('Partner discounts'),
        'description' => t('Get great discounts from our valued partners.')
      ],
      [
        'title' => t('Membership pack'),
        'description' => t('Christian Jobs merchendise and a free copy of "Every Good Endeavour"'),
      ],
    ]
  ];
  $info['rpo'] = [
    'label' => t('Outsourced Help (RPO)'),
    'description' => t('Let Christian Jobs manage your recruitment process.'),
    'price' => new Price('2995.00', 'GBP'),
    'cta_text' => new TranslatableMarkup('Find Out More'),
    'cta_url' => Url::fromUri('internal:/outsourced-help'),
    'features' => [
      [ 'title' => t('1 Free 60 day job advert') ],
      [ 'title' => t('1 year free membership') ],
      [ 'title' => t('Social media promotions')  ],
      [ 'title' => t('Dedicated Account Manager') ],
      [ 'title' => t('Personalised intake session') ],
      [ 'title' => t('Initial applicant screening') ],
      [ 'title' => t('Application assessment support') ],
      [ 'title' => t('Negotiation & reference checks') ],
    ],
  ];
  $info['executive_search'] = [
    'label' => t('Executive Search'),
    'description' => t('Proactive partnership in searching, sourcing and securing critical talent.'),
    'price' => t('Contact Us'),
    'duration' => 'P60D',
    'cta_text' => new TranslatableMarkup('Find Out More'),
    'cta_url' => Url::fromRoute('job_board.exec_search', []),
    'features' => [
      [ 'title' => t('1 Free 60 day job advert') ],
      [ 'title' => t('1 year free membership') ],
      [ 'title' => t('Christian Jobs Director engagement') ],
      [ 'title' => t('Social media promotions') ],
      [ 'title' => t('Outsourced application management') ],
      [ 'title' => t('Thomas PPA assessment'), 'description' => t('Thomas PPA behavioural assessment for final stage candidates') ],
      [ 'title' => t('Negotiation & reference checks'), ],
      [ 'title' => t('6 month placement guarantee'), ],
      [ 'title' => t('Individualised flat fee agreement'), ],
    ],
  ];

  return $key ? (isset($info[$key]) ? $info[$key] : NULL) : $info;
}

/**
 * Get the default value for the contact_* fields on jobs.
 *
 * @param FieldableEntityInterface $entity
 * @param FieldDefinitionInterface $field_definition
 */
function job_board_job_role_contact_default_value(FieldableEntityInterface $entity, FieldDefinitionInterface $field_definition) {
  // Get the correct employer profile.
  if ($entity->organisation->entity) {
    $organisation = $entity->organisation->entity;
  }
  else if ($entity instanceof EntityOwnerInterface) {
    $organisation = $entity->getOwner();
  }
  else {
    $organisation = User::load(\Drupal::currentUser()->id());
  }

  if (!$organisation) {
    return [];
  }

  /** @var \Drupal\profile\Entity\ProfileInterface $employer_profile */
  $employer_profile = $organisation->profile_employer->entity;
  if (!$employer_profile) {
    return [];
  }

  $fields_map = [
    'contact_phone' => 'tel',
    'contact_address' => 'address',
    'contact_email' => 'email',
  ];
  $field_name = $field_definition->getName();
  if (!$fields_map[$field_name]) {
    return [];
  }

  return $employer_profile->{$fields_map[$field_name]}->getValue();
}

/**
 * Implements hook_mail().
 */
function job_board_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    case 'new_exec_search_req':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = new TranslatableMarkup(
        'New Executive Search Request from @name for @role',
        [
          '@name' => $params['name'],
          '@role' => $params['position'],
        ],
        $options
      );
      $message['body'][] = new TranslatableMarkup(
        "@name has requested a callback regarding a new position. @name has requested to callback at @time.",
        [
          '@name' => $params['name'],
          '@time' => $params['callback_time'],
        ],
        $options
      );
      $message['body'][] = new TranslatableMarkup(
        "Name:\t@name\nOrganisation:\t@organisation\nPhone Number:\t@tel\nEmail:\t@email\nPosition:\t@role\nDescription:\t@description",
        [
          '@name' => $params['name'],
          '@organisation' => $params['organisation'],
          '@tel' => $params['phone_number'],
          '@email' => $params['email'],
          '@role' => $params['position'],
          '@description' => $params['description'],
        ],
        $options
      );
      break;
  }

}

/**
 * Implements hook_user_format_name_alter.
 */
function job_board_user_format_name_alter(&$name, AccountInterface $account) {
  if (!($account instanceof UserInterface)) {
    $account = entity_load('user', $account->id());
  }

  /** @var \Drupal\user\UserInterface $account */
  if ($account->hasRole('employer')) {
    /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
    $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');
    if ($profile = $profile_storage->loadDefaultByUser($account, 'employer')) {
      $name = $profile->employer_name->value;
    }
  }
}

/**
 * Implements hook_cj_membership_update();
 *
 * @param \Drupal\cj_membership\Entity\Membership $membership
 */
function job_board_cj_membership_update(Membership $membership) {
  /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
  $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

  // If the membership has just become active.
  if (($membership->status == Membership::STATUS_ACTIVE) && ($membership->status != $membership->original->status)) {
    $profile = $profile_storage->loadDefaultByUser($membership->getOwner(), 'employer');
    if (!$profile->employer_on_directory->value) {
      $profile->employer_on_directory = TRUE;
      $profile->save();
    }
  }
  else if (($membership->status == Membership::STATUS_EXPIRED) && ($membership->original->status == Membership::STATUS_ACTIVE)) {
    $profile = $profile_storage->loadDefaultByUser($membership->getOwner(),'employer');
    if ($profile->employer_on_directory->value) {
      $job_storage = \Drupal::entityTypeManager()->getStorage('job_role');
      $query = $job_storage->getQuery();
      $query->condition('organisation', $membership->getOwnerId());
      $query->condition('publish_date', (new DrupalDateTime())->format('Y-m-d'), '<');
      $query->condition('paid_to_date', (new DrupalDateTime())->format('Y-m-d'), '>=');

      if (!$query->count()->execute()) {
        $profile->employer_on_directory = FALSE;
        $profile->save();
      }
    }
  }
}

/**
 * Implements hook_cj_membership_insert.
 *
 * @param \Drupal\cj_membership\Entity\Membership $membership
 */
function job_board_cj_membership_insert(Membership $membership) {
  /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
  $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

  if ($membership->status == Membership::STATUS_ACTIVE) {
    $profile = $profile_storage->loadDefaultByUser($membership->getOwner(), 'employer');
    if (!$profile->employer_on_directory->value) {
      $profile->employer_on_directory = TRUE;
      $profile->save();
    }
  }
}

function job_board_views_post_execute(ViewExecutable $view) {
  if ($view->id() === 'employer_directory') {
    $ids = [];
    foreach ($view->result as $key => $row) {
      $ids[$key] = $row->_object->getEntity()->id();
    }

    if (empty($ids)) {
      return;
    }

    $query = \Drupal::database()->select('job_role', 'jr');
    $query->condition('organisation', $ids, 'IN');
    $query->condition('publish_date', (new DrupalDateTime())->format('Y-m-d'), '<=');
    $query->condition('end_date', (new DrupalDateTime())->format('Y-m-d'), '>');
    $query->condition('paid', 1);
    $query->addField('jr', 'organisation', 'org');
    $query->addExpression('COUNT(IF(jr.compensation = :volunteer, 1, NULL))', 'vol_count', [':volunteer' => 'volunteer']);
    $query->addExpression('COUNT(IF(jr.compensation <> :not_volunteer, 1, NULL))', 'paid_count', [':not_volunteer' => 'volunteer']);
    $query->groupBy('organisation');

    $flipped_ids = array_flip($ids);
    foreach ($query->execute()->fetchAll() as $count_row) {
      $view->result[$flipped_ids[$count_row->org]]->voluntary_role_count = $count_row->vol_count;
      $view->result[$flipped_ids[$count_row->org]]->paid_role_count = $count_row->paid_count;
    }

    // Get the flow counts.
    $query = \Drupal::database()->select('flag_counts', 'fc');
    $query->condition('fc.flag_id', 'employer_like');
    $query->condition('fc.entity_type', 'user');
    $query->condition('fc.entity_id', $ids, 'IN');
    $query->addField('fc', 'entity_id', 'org');
    $query->addField('fc', 'count', 'count');
    foreach ($query->execute()->fetchAll() as $count_row) {
      $view->result[$flipped_ids[$count_row->org]]->like_count = $count_row->count;
    }
  }
}

/**
 * Implements hook_preprocess_block.
 *
 * @param $variables
 */
function job_board_preprocess_block(&$variables) {
  if ($variables['plugin_id'] === 'mini_layout:employer_directory__filters') {
    $variables['#attached']['library'][] = 'job_board/collapsible-filters';
  }
  else if ($variables['plugin_id'] === 'entity_field:profile:employer_name') {
    if (!empty($variables['content']['field'][0]['#tag']) && $variables['content']['field'][0]['#tag'] == 'h2') {
      $element = &$variables['content']['field'][0];
      $element['content'] = [
        '#type' => 'link',
        '#title' => $element['#value'],
        '#url' => Url::fromRoute('job_board.employer', [
          'user' => $variables['content']['field']['#object']->getOwnerId(),
        ])
      ];
      unset($element['#value']);

      $variables['elements']['content'] = $variables['content'];
    }
  }
  else if ($variables['plugin_id'] === 'field_block:profile:employer:employer_name') {
    if (!empty($variables['content'][0]['#tag']) && $variables['content'][0]['#tag'] == 'h2') {
      $element = &$variables['content'][0];
      $element['content'] = [
        '#type' => 'link',
        '#title' => $element['#value'],
        '#url' => Url::fromRoute('job_board.employer', [
          'user' => $variables['content']['#object']->getOwnerId(),
        ])
      ];
      unset($element['#value']);

      $variables['elements']['content'] = $variables['content'];
    }
  }
}
